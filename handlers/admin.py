# handlers/admin.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, Document
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.db import get_db_session, User, Application, Event, AllowedUser, get_or_create_group, Group, Semester
from sqlalchemy.exc import IntegrityError
import openpyxl
import io
import os
import openpyxl
from datetime import datetime
from aiogram.types import ContentType, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from config import ADMIN_IDS

router = Router()

class UploadExcel(StatesGroup):
    type = State()

class FindStudent(StatesGroup):
    query = State()

class SetRole(StatesGroup):
    waiting_for_telegram_id = State()
    waiting_for_role = State()

# =============================
# 1. –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
# =============================
async def show_admin_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    kb.button(text="üîç –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="admin_find_user")
    kb.button(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="admin_stats")
    kb.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_clear_apps")
    kb.button(text="üìÖ –ò–º–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (Excel)", callback_data="admin_upload_schedule")
    kb.button(text="üì§ –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (Excel)", callback_data="admin_upload_excel")
    
    kb.adjust(1)
    await message.answer("üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=kb.as_markup())


# =============================
# 2. –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# =============================
@router.message(Command("admin"))
async def admin_panel_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await show_admin_menu(message)


# =============================
# 3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =============================
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    session = get_db_session()
    users = session.query(User).order_by(User.id).all()
    if not users:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        session.close()
        return

    for user in users[:50]:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_user_{user.id}")
        await callback.message.answer(
            f"üë§ <b>{user.full_name}</b> ‚Äî <a href='tg://user?id={user.telegram_id}'>[–Ω–∞–ø–∏—Å–∞—Ç—å]</a>\n"
            f"üè´ –ì—Ä—É–ø–ø–∞: {user.group.name if user.group else '‚Äî'}\n"
            f"üÜî Telegram ID: <code>{user.telegram_id}</code>",
            reply_markup=kb.as_markup()
        )
    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    session.close()

@router.callback_query(F.data == "admin_find_user")
async def admin_find_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîé –í–≤–µ–¥–∏—Ç–µ –§–ò–û, –≥—Ä—É–ø–ø—É –∏–ª–∏ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(FindStudent.query)

@router.callback_query(F.data == "admin_upload_schedule")
async def prompt_schedule_upload(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π.\n"
                                  "–§–æ—Ä–º–∞—Ç: –ì—Ä—É–ø–ø–∞ | –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ | –í—Ä–µ–º—è | –ü—Ä–µ–¥–º–µ—Ç | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å | –ê—É–¥–∏—Ç–æ—Ä–∏—è | –ù–µ–¥–µ–ª—è")
    await state.set_state(UploadExcel.type)
    await state.update_data(file_type="schedule")
    await callback.answer()


@router.message(FindStudent.query)
async def process_find_student(message: Message, state: FSMContext):
    text = message.text.strip()
    session = get_db_session()

    results = session.query(User).filter(
        (User.full_name.ilike(f"%{text}%")) |
        (User.telegram_id == text if text.isdigit() else False) |
        (User.group.has(name=text.upper()))
    ).all()

    if not results:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        for user in results[:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_user_{user.id}")
            await message.answer(
                f"üë§ <b>{user.full_name}</b> ‚Äî <a href='tg://user?id={user.telegram_id}'>[–Ω–∞–ø–∏—Å–∞—Ç—å]</a>\n"
                f"üè´ –ì—Ä—É–ø–ø–∞: {user.group.name if user.group else '‚Äî'}\n"
                f"üÜî Telegram ID: <code>{user.telegram_id}</code>",
                reply_markup=kb.as_markup()
            )

    await state.clear()
    session.close()


# =============================
# 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
# =============================
@router.callback_query(F.data.startswith("admin_delete_user_"))
async def admin_delete_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    session = get_db_session()
    user = session.query(User).filter_by(id=user_id).first()
    if user:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.query(Application).filter_by(user_id=user.id).delete()
        session.delete(user)
        session.commit()
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.", show_alert=True)
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    session.close()


# =============================
# 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
# =============================
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    session = get_db_session()
    total_users = session.query(User).count()
    total_apps = session.query(Application).count()
    total_events = session.query(Event).count()
    active_events = session.query(Event).filter_by(is_active=1).count()

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        f"üë®‚Äçüéì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: <b>{total_users}</b>\n"
        f"‚úâ –ü–æ–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: <b>{total_apps}</b>\n"
        f"üéâ –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>{total_events}</b>\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>{active_events}</b>"
    )
    await callback.message.answer(text)
    await callback.answer()
    session.close()


# =============================
# 6. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
# =============================
@router.callback_query(F.data == "admin_clear_apps")
async def admin_clear_apps(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin_clear_confirm")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_clear_cancel")
    kb.adjust(2)
    await callback.message.answer("‚ö† –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> –∑–∞—è–≤–∫–∏?", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin_clear_cancel")
async def admin_clear_cancel(callback: CallbackQuery):
    await callback.answer("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)
    await show_admin_menu(callback.message)

@router.callback_query(F.data == "admin_clear_confirm")
async def admin_clear_confirm(callback: CallbackQuery):
    session = get_db_session()
    deleted = session.query(Application).delete()
    session.commit()
    session.close()
    await callback.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {deleted}", show_alert=True)
    await show_admin_menu(callback.message)



# –°–±—Ä–æ—Å –≤—Å–µ—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π /admin_reset_all_fsm

@router.message(Command("admin_reset_all_fsm"))
async def admin_reset_all_fsm(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await state.clear()
    await message.answer("‚úÖ –í—Å–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.")

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ /set_role
@router.message(Command("set_role"))
async def cmd_set_role(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å:")
    await state.set_state(SetRole.waiting_for_telegram_id)

@router.message(SetRole.waiting_for_telegram_id)
async def process_telegram_id(message: Message, state: FSMContext):
    telegram_id = message.text.strip()
    if not telegram_id.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return
    await state.update_data(telegram_id=int(telegram_id))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: student / dean / admin")
    await state.set_state(SetRole.waiting_for_role)

@router.message(SetRole.waiting_for_role)
async def process_new_role(message: Message, state: FSMContext):
    role = message.text.strip().lower()
    if role not in ["student", "dean", "admin"]:
        await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ: student / dean / admin")
        return

    data = await state.get_data()
    telegram_id = data["telegram_id"]

    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        user.role = role
        session.commit()
        await message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user.full_name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{role}</b>.")

    await state.clear()
    session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ excel
@router.callback_query(F.data == "admin_upload_excel")
async def prompt_excel_upload(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
                                  "–§–æ—Ä–º–∞—Ç: <code>–§–ò–û | –ì—Ä—É–ø–ø–∞</code> (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏).")
    await state.set_state(UploadExcel.type)
    await state.update_data(file_type="students")
    await callback.answer()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ excel
@router.message(F.content_type == ContentType.DOCUMENT, StateFilter(UploadExcel.type))
async def handle_excel_file(message: Message, state: FSMContext):
    os.makedirs("temp", exist_ok=True) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ temp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    document = message.document
    file_path = f"temp/{document.file_name}"
    await message.bot.download(document, destination=file_path)

    wb = openpyxl.load_workbook(file_path)
    sheet = wb.active

    session = get_db_session()
    added = 0

    file_type = (await state.get_data()).get("file_type")

    if file_type == "schedule":
        from database.db import Schedule, get_or_create_group, Semester, Group
        from datetime import datetime

        semester_dates = {}
        for row in sheet.iter_rows(min_row=2, values_only=True):
            sem_group = str(row[8]).strip() if row[8] else None
            start_date = row[9]
            end_date = row[10]
            if sem_group and isinstance(start_date, datetime) and isinstance(end_date, datetime):
                semester_dates[sem_group] = (start_date.date(), end_date.date())

        for row in sheet.iter_rows(min_row=2, values_only=True):
            if not all(row[:7]):
                continue

            print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: {row}")

            group_name = str(row[0]).strip()
            day = str(row[1]).strip()
            time = str(row[2]).strip()
            subject = str(row[3]).strip()
            teacher = str(row[4]).strip()
            room = str(row[5]).strip()
            week = int(str(row[6]).strip()) if str(row[6]).strip() in ['1', '2'] else 1

            group = get_or_create_group(session, group_name)

            if group_name in semester_dates:
                start_date, end_date = semester_dates[group_name]

                existing_semester = (
                    session.query(Semester)
                    .join(Semester.groups)
                    .filter(Group.id == group.id)
                    .first()
                )
                if not existing_semester:
                    semester = Semester(
                        number=1,
                        date_start=start_date,
                        date_end=end_date,
                        group_name=group_name,
                        groups=[group]
                    )
                    session.add(semester)

            new_schedule = Schedule(
                group_id=group.id,
                day_of_week=day.upper(),
                time=time,
                subject=subject,
                teacher=teacher,
                room=room,
                week_number=week
            )
            session.add(new_schedule)
            added += 1

        await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –∑–∞–ø–∏—Å–µ–π.")

    session.commit()
    session.close()
    await state.clear()




# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞

def register(dp):
    dp.include_router(router)