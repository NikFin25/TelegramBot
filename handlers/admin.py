# handlers/admin.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.db import get_db_session, User, Application, Event
from config import ADMIN_IDS

router = Router()

class FindStudent(StatesGroup):
    query = State()

# =============================
# 1. –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
# =============================
async def show_admin_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    kb.button(text="üîç –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="admin_find_user")
    kb.button(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="admin_stats")
    kb.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_clear_apps")
    kb.adjust(1)
    await message.answer("üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=kb.as_markup())


# =============================
# 2. –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# =============================
@router.message(Command("admin"))
async def admin_panel_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await show_admin_menu(message)


# =============================
# 3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =============================
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    session = get_db_session()
    users = session.query(User).order_by(User.id).all()
    if not users:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        session.close()
        return

    for user in users[:50]:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_user_{user.id}")
        await callback.message.answer(
            f"üë§ <b>{user.full_name}</b> ‚Äî <a href='tg://user?id={user.telegram_id}'>[–Ω–∞–ø–∏—Å–∞—Ç—å]</a>\n"
            f"üè´ –ì—Ä—É–ø–ø–∞: {user.group.name if user.group else '‚Äî'}\n"
            f"üÜî Telegram ID: <code>{user.telegram_id}</code>",
            reply_markup=kb.as_markup()
        )
    await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    session.close()

@router.callback_query(F.data == "admin_find_user")
async def admin_find_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîé –í–≤–µ–¥–∏—Ç–µ –§–ò–û, –≥—Ä—É–ø–ø—É –∏–ª–∏ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(FindStudent.query)

@router.message(FindStudent.query)
async def process_find_student(message: Message, state: FSMContext):
    text = message.text.strip()
    session = get_db_session()

    results = session.query(User).filter(
        (User.full_name.ilike(f"%{text}%")) |
        (User.telegram_id == text if text.isdigit() else False) |
        (User.group.has(name=text.upper()))
    ).all()

    if not results:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        for user in results[:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_user_{user.id}")
            await message.answer(
                f"üë§ <b>{user.full_name}</b> ‚Äî <a href='tg://user?id={user.telegram_id}'>[–Ω–∞–ø–∏—Å–∞—Ç—å]</a>\n"
                f"üè´ –ì—Ä—É–ø–ø–∞: {user.group.name if user.group else '‚Äî'}\n"
                f"üÜî Telegram ID: <code>{user.telegram_id}</code>",
                reply_markup=kb.as_markup()
            )

    await state.clear()
    session.close()


# =============================
# 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
# =============================
@router.callback_query(F.data.startswith("admin_delete_user_"))
async def admin_delete_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    session = get_db_session()
    user = session.query(User).filter_by(id=user_id).first()
    if user:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.query(Application).filter_by(user_id=user.id).delete()
        session.delete(user)
        session.commit()
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.", show_alert=True)
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    session.close()


# =============================
# 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
# =============================
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    session = get_db_session()
    total_users = session.query(User).count()
    total_apps = session.query(Application).count()
    total_events = session.query(Event).count()
    active_events = session.query(Event).filter_by(is_active=1).count()

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        f"üë®‚Äçüéì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: <b>{total_users}</b>\n"
        f"‚úâ –ü–æ–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: <b>{total_apps}</b>\n"
        f"üéâ –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>{total_events}</b>\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>{active_events}</b>"
    )
    await callback.message.answer(text)
    await callback.answer()
    session.close()


# =============================
# 6. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
# =============================
@router.callback_query(F.data == "admin_clear_apps")
async def admin_clear_apps(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin_clear_confirm")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_clear_cancel")
    kb.adjust(2)
    await callback.message.answer("‚ö† –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>–í–°–ï</b> –∑–∞—è–≤–∫–∏?", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin_clear_cancel")
async def admin_clear_cancel(callback: CallbackQuery):
    await callback.answer("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)
    await show_admin_menu(callback.message)

@router.callback_query(F.data == "admin_clear_confirm")
async def admin_clear_confirm(callback: CallbackQuery):
    session = get_db_session()
    deleted = session.query(Application).delete()
    session.commit()
    session.close()
    await callback.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {deleted}", show_alert=True)
    await show_admin_menu(callback.message)


# =============================
# 7. –°–±—Ä–æ—Å –≤—Å–µ—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π /admin_reset_all_fsm
# =============================
@router.message(Command("admin_reset_all_fsm"))
async def admin_reset_all_fsm(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await state.clear()
    await message.answer("‚úÖ –í—Å–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.")


# =============================
# 8. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
# =============================

def register(dp):
    dp.include_router(router)
