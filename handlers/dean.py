# handlers/dean.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from database.db import get_db_session, Event, Application, EventParticipant, User, create_event

DEAN_SENT_MSGS: dict[int, list[int]] = {}

router = Router()

# –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EventCreation(StatesGroup):
    title = State()
    description = State()
    requirements = State()

def get_status_buttons(app_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–∞", callback_data=f"status_accept_{app_id}"),
            InlineKeyboardButton(text="üöß –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status_process_{app_id}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", callback_data=f"status_reject_{app_id}"),
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"status_done_{app_id}")
        ]
    ])

async def show_dean_menu(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üì• –ó–∞—è–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="view_requests")
    builder.button(text="üì£ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="add_event")
    builder.button(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="admin_events")
    builder.adjust(1)
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–î–µ–∫–∞–Ω–∞—Ç)", reply_markup=builder.as_markup())

@router.callback_query(F.data == "view_requests")
async def view_requests(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    dean_id = callback.from_user.id

    old_ids = DEAN_SENT_MSGS.get(dean_id, [])
    for mid in old_ids:
        try:
            await callback.bot.delete_message(chat_id=chat_id, message_id=mid)
        except Exception:
            pass
    DEAN_SENT_MSGS[dean_id] = []

    session = get_db_session()
    apps = session.query(Application).all()

    if not apps:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        await show_dean_menu(callback.message)
        session.close()
        return

    for app in apps:
        user = app.user
        msg = await callback.message.answer(
            text=(
                f"üë§ <b>{user.full_name}</b> ‚Äî "
                f"<a href='tg://user?id={user.telegram_id}'>[–Ω–∞–ø–∏—Å–∞—Ç—å]</a>\n"
                f"üìÑ –ó–∞—è–≤–∫–∞: {app.content}\n"
                f"üìÖ –î–∞—Ç–∞: {app.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {app.status}"
            ),
            reply_markup=get_status_buttons(app.id)
        )
        DEAN_SENT_MSGS[dean_id].append(msg.message_id)

    await show_dean_menu(callback.message)
    session.close()

@router.callback_query(F.data.startswith("status_"))
async def change_status(callback: CallbackQuery):
    session = get_db_session()
    try:
        _, action, app_id = callback.data.split("_")
        app_id = int(app_id)
        status_map = {
            "accept": "–ü—Ä–∏–Ω—è—Ç–∞",
            "process": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            "reject": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "done": "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
        }
        new_status = status_map.get(action)
        if not new_status:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            return

        app = session.query(Application).filter_by(id=app_id).first()
        if not app:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        app.status = new_status
        session.commit()
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{new_status}¬ª")

        await callback.bot.send_message(
            chat_id=app.user.telegram_id,
            text=(
                f"üì¢ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"{app.content}\n\n"
                f"üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{new_status}</b>"
            )
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    finally:
        session.close()

@router.callback_query(F.data == "admin_events")
async def admin_events(callback: CallbackQuery):
    session = get_db_session()
    events = session.query(Event).order_by(Event.created_at.desc()).all()

    if not events:
        await callback.message.edit_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.")
        await show_dean_menu(callback.message)
        session.close()
        return

    await callback.message.delete()

    for event in events:
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if event.is_active else "‚ö™ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        builder = InlineKeyboardBuilder()
        builder.button(text="üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"event_participants_{event.id}")
        if event.is_active:
            builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event.id}")

        await callback.message.answer(
            text=(
                f"üéâ <b>{event.title}</b>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description}\n"
                f"üìé <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> {event.requirements}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {event.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"{status}"
            ),
            reply_markup=builder.as_markup()
        )

    await show_dean_menu(callback.message)
    session.close()

@router.callback_query(F.data.startswith("delete_event_"))
async def delete_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    session = get_db_session()

    event = session.query(Event).filter_by(id=event_id).first()
    if not event:
        await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        event.is_active = 0
        session.commit()
        await callback.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (—É–¥–∞–ª–µ–Ω–æ).")
        await callback.message.edit_reply_markup(reply_markup=None)
    session.close()

@router.callback_query(F.data.startswith("event_participants_"))
async def show_event_participants(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    session = get_db_session()
    event = session.query(Event).filter_by(id=event_id).first()
    participants = session.query(EventParticipant).filter_by(event_id=event_id).all()

    if not participants:
        await callback.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")
        session.close()
        return

    await callback.message.answer(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <b>{event.title}</b>")
    for p in participants:
        user = p.user
        await callback.message.answer(
            f"üë§ <b>{user.full_name}</b>\n"
            f"üè´ –ì—Ä—É–ø–ø–∞: {user.group.name if user.group else '‚Äî'}\n"
            f"üìÖ –ó–∞–ø–∏—Å–∞–Ω: {p.registered_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"<a href='tg://user?id={user.telegram_id}'>[–Ω–∞–ø–∏—Å–∞—Ç—å]</a>"
        )
    session.close()

@router.callback_query(F.data == "add_event")
async def start_event_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìå –í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>:")
    await state.set_state(EventCreation.title)

@router.message(EventCreation.title)
async def get_event_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>:")
    await state.set_state(EventCreation.description)

@router.message(EventCreation.description)
async def get_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìé –í–≤–µ–¥–∏—Ç–µ <b>—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</b> –∏–ª–∏ '-' –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç:")
    await state.set_state(EventCreation.requirements)

@router.message(EventCreation.requirements)
async def get_event_requirements(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data.get("title")
    description = data.get("description")
    requirements = message.text if message.text.strip() != "-" else "‚Äî"

    result = create_event(title, description, requirements)
    if result:
        await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    await state.clear()
    await show_dean_menu(message)
