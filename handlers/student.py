from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import get_db_session, register_user, User, get_today_schedule, get_two_weeks_schedule, Application, validate_allowed_user, AllowedUser
from handlers.dean import show_dean_menu

router = Router()
# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏. subject ‚Äî –¥–ª—è —Ç–µ–º—ã –∑–∞—è–≤–∫–∏; description ‚Äî –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è.
class ApplicationForm(StatesGroup):
    subject = State()
    description = State()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.message(Command("start"))
async def start_handler(message: Message):
    bot = message.bot  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
    for i in range(message.message_id - 1, message.message_id - 20, -1):
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=i)
        except:
            continue

    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if user:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!")
        if user.role == "dean":
            await show_dean_menu(message)
        elif user.role == "admin":
            await show_dean_menu(message)
        else:
            await show_main_menu(message)

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –§–ò–û –∏ –≥—Ä—É–ø–ø—É
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û –∏ –≥—Ä—É–ø–ø—É</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 21-–°–ü–û-–ò–°–∏–ü-02</i>"
        )

    session.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
@router.message(F.text.regexp(r'^[–ê-–Ø–Å–∞-—è—ë-]+\s[–ê-–Ø–Å–∞-—è—ë-]+\s[–ê-–Ø–Å–∞-—è—ë-]+\s[\d–ê-–Ø–Å–∞-—è—ë-]+$'))
async def register_user_handler(message: Message):
    parts = message.text.split()
    if len(parts) < 4:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É.\n\n–ü—Ä–∏–º–µ—Ä:\n<b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 21-–°–ü–û-–ò–°–∏–ü-02</b>")
        return

    full_name = " ".join(parts[:3])
    group_name = " ".join(parts[3:])

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ allowed_users
    if not validate_allowed_user(full_name, group_name):
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    if register_user(message.from_user.id, full_name, group_name):
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = get_db_session()
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
            f"–§–ò–û: {full_name}\n"
            f"–ì—Ä—É–ø–ø–∞: {group_name}"
        )
        await show_main_menu(message)

        session.close()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
async def show_main_menu(message: Message):
    builder = InlineKeyboardBuilder()

    builder.button(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today_schedule")
    builder.button(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏", callback_data="two_weeks_schedule")
    builder.button(text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_events")
    builder.button(text="‚úâ –ó–∞—è–≤–∫–∞ –≤ –¥–µ–∫–∞–Ω–∞—Ç", callback_data="dean_application")
    builder.button(text="üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")

    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ 
    builder.adjust(1)

    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=builder.as_markup())

# –ó–∞—è–≤–∫–∞ –≤ –¥–µ–∫–∞–Ω–∞—Ç —Å—Ç—É–¥–µ–Ω—Ç
@router.callback_query(F.data == "dean_application")
async def start_application(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–º—É</b> –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:")
    await state.set_state(ApplicationForm.subject)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –∑–∞—è–≤–∫–∏
@router.message(ApplicationForm.subject)
async def receive_subject(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("‚úè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª, –µ—Å–ª–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è:")
    await state.set_state(ApplicationForm.description)

@router.message(ApplicationForm.description)
async def receive_description(message: Message, state: FSMContext):
    data = await state.get_data()
    subject = data.get("subject")
    description = message.text if message.text.strip() != "-" else ""

    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û –∏ –≥—Ä—É–ø–ø—É.")
        await state.clear()
        session.close()
        return  # ‚õî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    from database.db import Application
    full_name = user.full_name
    group = user.group.name if user.group else "–ì—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    content = (
        f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞</b>\n"
        f"üë§ <b>–§–ò–û:</b> {full_name}\n"
        f"üè´ <b>–ì—Ä—É–ø–ø–∞:</b> {group}\n\n"
        f"üìå <b>–¢–µ–º–∞:</b> {subject}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '‚Äî'}"
    )

    new_app = Application(
        user_id=user.id,
        content=content
    )
    session.add(new_app)
    session.commit()
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –¥–µ–∫–∞–Ω–∞—Ç.")

    await state.clear()
    session.close()


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_status_buttons(app_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–∞", callback_data=f"status_accept_{app_id}"),
            InlineKeyboardButton(text="üöß –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status_process_{app_id}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", callback_data=f"status_reject_{app_id}"),
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"status_done_{app_id}")
        ]
    ])

#–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–º
from database.db import get_db_session, Event, EventParticipant, register_for_event

@router.callback_query(F.data == "view_events")
async def view_events(callback: CallbackQuery):
    session = get_db_session()
    events = session.query(Event).filter_by(is_active=1).all()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    if not events:
        await callback.message.edit_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        session.close()
        return

    await callback.message.delete()  # –æ—á–∏—â–∞–µ–º –º–µ–Ω—é

    for event in events:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        already_registered = session.query(EventParticipant).filter_by(
            user_id=user.id, event_id=event.id
        ).first()

        button_text = "‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã" if already_registered else "üì• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
        button_state = "disabled" if already_registered else f"register_event_{event.id}"

        builder = InlineKeyboardBuilder()
        if not already_registered:
            builder.button(text=button_text, callback_data=button_state)

        await callback.message.answer(
            text=(
                f"üéâ <b>{event.title}</b>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.description}\n"
                f"üìé <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> {event.requirements}"
            ),
            reply_markup=builder.as_markup() if not already_registered else None
        )

    await show_main_menu(callback.message)
    session.close()

#–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
@router.callback_query(F.data.startswith("register_event_"))
async def register_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    # –£–∂–µ –∑–∞–ø–∏—Å–∞–Ω?
    already = session.query(EventParticipant).filter_by(user_id=user.id, event_id=event_id).first()
    if already:
        await callback.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        session.close()
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
    success = register_for_event(user.id, event_id)
    if success:
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!")
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.")

    session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
@router.callback_query(F.data == "today_schedule")
async def today_schedule(callback: CallbackQuery):
    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    if user:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        schedule = get_today_schedule(user.group.name)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user.group.name
        print("–¢–∏–ø schedule –î–û —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", type(schedule))
        if schedule:
            formatted = format_schedule(schedule)
            print("–¢–∏–ø schedule –ü–û–°–õ–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", type(formatted))
            await callback.message.edit_text(f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n{formatted}")  # –§—É–Ω–∫—Ü–∏—è get_today_schedule —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        else:
            await callback.message.edit_text("‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.")
    await show_main_menu(callback.message)
    session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏"
@router.callback_query(F.data == "two_weeks_schedule")
async def two_weeks_schedule(callback: CallbackQuery):
    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    if user:
        schedule = get_two_weeks_schedule(user.group.name)
        if schedule:
            formatted = format_schedule(schedule, two_weeks=True)
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            if len(formatted) > 4000:
                parts = [formatted[i:i+4000] for i in range(0, len(formatted), 4000)]
                for part in parts:
                    await callback.message.answer(part)
            else:
                await callback.message.edit_text(f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏:</b>\n{formatted}")
        else:
            await callback.message.edit_text("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await show_main_menu(callback.message)
    session.close()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
@router.callback_query(F.data == "my_requests")
async def my_requests(callback: CallbackQuery):
    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        session.close()
        return

    applications = session.query(Application).filter_by(user_id=user.id).all()

    if not applications:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for app in applications:
            await callback.message.answer(
                text=(
                    f"üìÑ –ó–∞—è–≤–∫–∞: {app.content}\n"
                    f"üìÖ –î–∞—Ç–∞: {app.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {app.status}"
                )
            )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    await show_main_menu(callback.message)
    session.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
def format_schedule(schedule, two_weeks=False):
    if not schedule:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    formatted_schedule = ""
    
    if two_weeks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        day_order = {
            'MONDAY': 1,
            'TUESDAY': 2,
            'WEDNESDAY': 3,
            'THURSDAY': 4,
            'FRIDAY': 5,
            'SATURDAY': 6,
            'SUNDAY': 7
        }
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
        day_names = {
            'MONDAY': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'TUESDAY': '–í—Ç–æ—Ä–Ω–∏–∫',
            'WEDNESDAY': '–°—Ä–µ–¥–∞',
            'THURSDAY': '–ß–µ—Ç–≤–µ—Ä–≥',
            'FRIDAY': '–ü—è—Ç–Ω–∏—Ü–∞',
            'SATURDAY': '–°—É–±–±–æ—Ç–∞',
            'SUNDAY': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å
        for week, days in schedule.items():
            formatted_schedule += f"\nüìå <b>{week}:</b>\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            sorted_days = sorted(days.items(), key=lambda x: x[1][0]['day_order'])
            
            for day, classes in sorted_days:
                day_name = day_names.get(day, day)
                formatted_schedule += f"\n<b>üìÖ {day_name}:</b>\n"
                for class_info in classes:
                    formatted_schedule += (
                        f"üïí {class_info['time']} - {class_info['subject']}\n"
                        f"   üè´ {class_info['auditorium']} | üë®‚Äçüè´ {class_info['teacher']}\n"
                    )
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
        for day, classes in schedule.items():
            formatted_schedule += f"\n<b>üìÖ {day}:</b>\n"
            for class_info in classes:
                formatted_schedule += (
                    f"üïí {class_info['time']} - {class_info['subject']}\n"
                    f"   üè´ {class_info['auditorium']} | üë®‚Äçüè´ {class_info['teacher']}\n"
                )

    return formatted_schedule

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
@router.callback_query(F.data == "delete_account")
async def confirm_delete(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", reply_markup=builder.as_markup())

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(callback.message)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
@router.callback_query(F.data == "confirm_delete")
async def delete_user(callback: CallbackQuery):
    session = get_db_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    if user:
        session.delete(user)
        session.commit()
        await callback.message.edit_text("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.edit_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ router –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def register(dp):
    dp.include_router(router)